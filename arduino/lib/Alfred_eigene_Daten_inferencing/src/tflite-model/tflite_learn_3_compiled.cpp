/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 27.03.2025 03:34:46

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1488;
#else
constexpr int kTensorArenaSize = 464;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,84 } };
const TfArray<1, float> quant0_scale = { 1, { 0.5925288200378418, } };
const TfArray<1, int> quant0_zero = { 1, { -91 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[5] = { -10, -148, 113, 21, 184, };
const TfArray<1, int> tensor_dimension1 = { 1, { 5 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00019774051907006651, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data2[5*20] = { 
  78, -19, -72, 41, -87, 18, 67, -107, 61, 24, 21, -64, -106, 78, -41, -96, 28, -33, 56, 39, 
  58, 100, -5, 3, -103, 106, -35, 68, 87, 53, -125, 4, 56, 108, -101, -12, -95, 68, 71, 0, 
  -95, -20, -42, -94, -91, 80, 105, 0, 40, 29, 97, 33, 97, 20, -93, 119, 102, -85, 4, 85, 
  12, 117, -110, 88, -55, -30, -53, -83, -23, -63, -20, 46, 117, 57, 27, 71, 83, -99, -119, -80, 
  76, -91, -99, 49, -127, 28, 77, -112, -2, 84, 25, 97, -26, 29, -112, 119, -89, 33, -71, 12, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 5,20 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0040367958135902882, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[20] = { -59, -36, -47, 8, 62, -78, -69, 59, -20, 131, 42, -49, 18, -91, -67, 61, 18, 81, -14, 0, };
const TfArray<1, int> tensor_dimension3 = { 1, { 20 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00039326626574620605, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[20*50] = { 
  44, -56, 93, 116, -2, 40, 69, 66, -4, -65, 74, 68, -83, 50, -53, 63, -88, 88, -12, 69, 56, -34, -4, 45, 2, -59, -4, 14, 1, -107, 82, 16, -28, -40, -69, -6, 97, 67, 39, -10, -100, 32, 59, 13, 34, -51, -52, 16, -102, -36, 
  -49, 58, 44, -53, -90, -32, 75, 71, -52, -48, -2, -95, 107, -66, -64, 91, -41, 8, -37, 76, 38, 1, -88, 90, 92, -100, -35, 14, 31, 79, 18, 61, 73, 85, 68, -99, 81, 16, -77, -20, 80, 47, 6, 8, -74, 7, -31, 32, 47, -89, 
  -28, -9, -53, -44, -49, 30, -20, -25, 71, -102, -54, -15, 91, -42, -7, 6, -35, 16, -40, -102, 68, 97, 78, -94, 91, -48, 79, 75, -59, 47, -94, 95, -29, 101, -101, -84, 11, 86, -45, -12, -30, -91, 50, 92, -59, 97, 53, -30, 83, 31, 
  58, 90, -69, -55, -26, 80, -72, -9, -23, 99, 101, -70, 42, 23, -11, 65, 50, 34, -72, 57, -70, -9, -84, 12, -84, 64, -48, -83, -54, -45, -77, 22, -84, -18, -43, -71, -36, -84, -104, -39, 81, 38, 73, -100, -46, -53, 1, 111, -73, 4, 
  -42, -95, -84, -33, -79, 84, -19, 16, -33, 70, -87, 79, -25, -15, 57, 42, -92, 57, -54, -8, -50, 106, -25, -23, 92, -42, 73, 27, -22, 8, -72, -85, -31, -79, 63, 112, -13, 100, 86, 63, -42, -65, -1, 86, -101, 102, -60, -51, -11, -67, 
  -82, -70, -37, -16, -109, 72, -47, -22, -34, -76, -111, 51, -30, 1, 17, -108, 5, 38, -75, 17, 86, -73, -100, -92, -54, 68, -38, 84, 48, 31, 109, -98, 37, 41, 55, -26, 42, 42, 41, -54, -87, -31, -88, 5, -16, 10, 25, -25, 20, 17, 
  73, -47, 88, 16, -18, 34, -79, -20, 49, -6, -11, 7, 54, -59, -105, -56, -34, 55, -13, 82, -22, -2, -34, 10, -61, 81, 96, -11, -95, -44, -7, -105, 42, 101, -39, 68, 22, -92, 41, 55, 65, 37, -27, -90, -95, -99, -65, 108, 58, 98, 
  -8, 40, -17, 82, 97, -30, 74, -102, 75, 7, 12, -65, 45, -26, -84, -46, 117, -96, 28, 92, 88, 56, -71, -54, 60, -108, -27, -103, 82, -36, 123, 100, -98, -75, 83, -47, -82, 38, -50, 28, 7, 92, -80, 32, 81, 12, 6, -55, 94, -3, 
  57, 47, 74, -108, -37, 109, 8, -37, -85, -52, 16, 22, 89, 50, 24, -55, 32, -105, 15, -78, -115, -36, 57, 89, 63, 26, -15, -14, -2, 40, 98, 34, -100, 28, 46, 95, 58, 9, -103, -39, 81, -95, 55, 8, -34, -53, -7, 29, 59, -6, 
  59, -15, 82, -18, 81, -36, -54, 70, -15, 5, 116, -92, 65, -26, 32, 50, -12, -89, 18, -2, 105, 5, -102, 4, -19, -4, 91, 26, -85, -67, 41, 83, -45, -108, -88, -95, 54, 57, -70, 9, -39, 79, 86, -25, 23, 26, -4, 56, -69, -29, 
  -68, 13, 19, -92, -53, 22, 106, -77, -30, 26, -82, 29, 29, 90, 51, 78, -72, -87, 1, -59, 28, -23, -86, 38, 78, -68, 100, -90, -40, 68, -64, 22, 38, 73, 21, 11, 28, -81, 41, -44, -37, -61, 68, -56, 7, -51, 105, -77, 40, -78, 
  -106, 55, -47, -97, 13, -49, 21, 78, 26, -38, -61, 42, 38, -59, -43, -25, -91, -22, 49, 3, 72, 42, -6, -46, 33, 38, -18, 33, 16, -79, 4, 43, -7, -16, 50, -17, -48, -51, 36, -89, 52, -87, -47, -42, -48, 15, -41, 60, -45, -79, 
  -97, 97, -54, 18, -12, 58, -75, -65, -85, -71, 65, -110, -43, 53, 72, 60, 46, 73, 14, 22, -71, 78, 56, -107, 16, -49, 105, -1, -22, 13, -89, 36, 9, 101, 41, 23, -56, -74, -48, -92, -53, -42, -56, 55, -5, 53, -69, -46, 6, -37, 
  9, -1, 61, -53, 57, 66, -76, -46, -63, 65, 69, -40, -106, 3, 54, 84, 85, -14, 64, -25, 0, -42, 42, 108, 6, -1, 19, 79, -103, 38, 80, -60, -73, -40, 83, -37, -16, -22, 14, 109, -116, 100, 72, -73, -72, -65, -75, 1, 67, 29, 
  49, -35, 62, 32, 54, 40, 36, -91, 93, 55, -17, -68, -90, 37, -67, 54, 7, 77, -94, -15, -44, 1, -91, 36, 17, -12, -12, 61, 39, -31, 20, 99, -74, 106, -67, 26, 33, -66, 77, 3, 22, -92, 48, 79, -85, 92, -56, -29, 100, 73, 
  60, 41, -112, 58, -36, 37, 46, -72, 64, 0, 86, -18, 60, 15, -67, 69, -109, 60, 29, 93, -51, 4, 72, -102, -27, -24, 59, -104, -22, 36, 58, -98, 68, 95, 1, -92, 43, 97, -61, -82, -48, 63, -64, -83, 99, -28, 14, 11, 15, -30, 
  32, -75, 67, -28, -9, 29, -43, -34, -9, -23, -28, -84, 20, 63, 76, 31, -57, -18, -36, -119, 95, 40, 1, 49, -96, -9, 57, -49, -81, 111, -61, -45, 90, 20, 23, 5, 27, 1, 2, -95, -14, -31, 73, -49, 65, 14, 99, 50, 20, -53, 
  97, 66, 88, -91, -18, 127, -14, 66, 11, 71, 68, -50, 106, 123, -44, 1, -52, -72, 111, -4, 67, -31, -72, -40, -51, -85, -70, -94, -27, 53, -44, 99, 14, -11, 13, 66, -86, 15, -82, 65, -87, -85, 7, -97, -31, 25, 30, 11, 67, 12, 
  42, 38, 27, -22, 2, 36, -87, 87, 63, -32, -96, 59, -90, -108, -44, 101, 24, -84, 101, 102, -55, -42, 21, 119, 78, 106, -98, 32, 81, 82, 90, 28, -102, 78, -4, -8, -25, 101, 68, 68, 28, -82, -87, -46, -73, -16, 91, -54, 28, -38, 
  -70, -4, 97, 17, -96, 33, -59, -19, 72, 70, -102, 13, -88, -3, -84, -73, -23, 107, -41, 41, 43, -98, 66, 86, -12, -29, 6, 71, -62, 104, -57, 69, 31, -3, -1, 51, 77, 98, -45, -21, -86, 9, -23, 85, -109, -51, 38, 95, -80, -84, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,50 } };
const TfArray<1, float> quant4_scale = { 1, { 0.002684272825717926, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[50] = { 5, -13, -29, -6, -15, 26, -1, 44, -1, 7, 5, -5, 26, 10, 0, -16, 22, -14, 31, 22, -6, 2, -8, 29, -17, -18, 4, 3, 1, 26, 46, 21, 30, -1, -17, -31, -19, 25, -16, 7, -5, 1, -22, -7, 11, -5, -19, 22, -10, -13, };
const TfArray<1, int> tensor_dimension5 = { 1, { 50 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0011990254279226065, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[50*84] = { 
  4, 51, 54, 19, 9, 19, 83, -3, 76, -102, 59, -39, 14, -88, 49, -69, 58, 1, 74, -89, -16, -32, 63, -41, 41, 69, -66, 47, 28, -20, -53, -63, 26, 30, 13, 28, 34, 47, -102, 36, 7, 42, -39, -86, 88, 24, 76, 101, 58, -68, -15, 31, -84, -71, -41, -92, 53, -47, -21, -39, -44, 50, -37, 4, 14, 80, -46, -63, -49, -46, 81, 10, 17, 41, 29, 59, 99, 66, 35, -56, -37, 38, -78, 43, 
  -108, 87, 12, -30, -56, 55, -66, -44, -25, 88, 39, 40, -23, -8, -38, 17, -51, 100, -19, 38, -105, 27, -112, -29, -28, -13, 8, -35, 86, -65, 78, 93, -4, -95, -2, 54, 40, -111, 48, 59, 17, 68, 42, 93, -38, 52, 99, 0, 16, 4, -14, -88, -46, 33, 59, 68, -106, -22, 58, -31, -38, -23, 63, 96, -60, -3, -44, -73, -10, 80, 61, 95, -88, 59, 87, 30, 71, -22, 17, 54, 63, 81, 9, -90, 
  49, -14, -69, -108, -67, 28, 66, -24, 116, -60, -12, -45, -67, -102, -52, -85, 34, -86, -2, 46, 62, -106, -82, 45, 111, -66, 50, 38, -23, 37, -100, 91, 61, 70, 4, -74, -63, 7, 72, -3, -96, 73, -58, 67, -65, 7, -70, -49, -54, 29, 93, 61, 74, 88, 61, -15, -33, 65, -16, 80, 56, -13, 89, 70, 0, -114, -52, 93, -103, -104, 1, 4, 46, -32, 32, -107, 5, 23, -75, 29, 107, -71, -89, 87, 
  -89, -70, 47, 85, 76, 101, -14, -12, -54, 4, 59, 98, -52, -80, 8, -8, -85, 70, -96, 72, -58, -83, -84, 80, 97, -9, -85, 85, 55, 54, 24, -52, 19, -26, -74, 75, 52, -64, -34, 103, -17, 37, -11, -13, -89, -74, 77, -45, -83, -64, 10, 91, -35, 38, -33, -34, 59, 47, 13, -62, -28, -83, 43, -10, -29, 57, 30, -83, -87, 51, 41, 71, -29, -68, -116, 20, -5, 32, 97, -10, -43, 33, -2, -48, 
  74, -63, -83, 36, -28, -95, 57, 11, -18, -52, 9, -85, 48, -46, -60, 11, -3, -94, -52, -77, 62, 48, 93, -26, -86, -63, 43, 60, -99, 81, 37, 27, 76, -72, -64, 16, -42, -18, 7, 78, -28, -66, -64, -102, -77, 108, 1, -100, 85, -13, -1, 93, -33, -9, -40, 51, 22, -41, -107, -58, -8, 76, 96, 69, -41, -2, -69, 22, -44, -53, 4, 53, -53, -71, -74, 23, 80, -29, 75, 14, -72, 77, -101, -37, 
  -16, -61, -65, 24, -88, -64, -11, 58, -92, -93, -39, -46, -27, -33, -81, -82, 85, 35, -98, -30, 85, 62, 62, 41, 15, 15, -1, -54, 112, 102, -48, 31, -73, 6, -87, 41, 19, 13, -21, 43, -7, 105, 32, 56, 5, -98, 24, -91, -107, 6, 107, -53, -3, 17, 75, -20, 72, -26, -42, 20, 86, -50, -17, 80, 47, -92, -113, 60, 0, -49, 45, -84, 102, -70, -56, -41, -60, 46, -80, -93, -23, -24, -86, 65, 
  50, -42, -102, -76, -5, 26, -16, -50, -46, 40, -8, 80, 71, 79, 60, -90, -12, 17, -89, -95, -68, -21, -11, -21, -63, -60, 30, -38, 17, -54, 61, 28, 78, -105, -30, -63, -75, 96, -100, -32, -65, -16, -17, 97, -5, 72, -23, 91, -55, -62, -83, -92, 44, -16, 85, -74, 39, 59, 10, 63, -72, 73, -95, 91, 96, -21, -42, -97, -102, 44, -86, 74, 71, -93, -94, 59, 58, -76, -32, -55, -61, -76, 91, -14, 
  102, 119, 57, 74, -34, -26, -86, 35, 96, -64, 109, 46, 11, -5, -70, -29, 8, 88, -29, 116, -55, 80, -57, -72, -53, 69, 43, 22, -37, 94, 46, -96, 85, -75, -81, 14, -34, -78, -30, -18, -46, 22, -9, 124, -33, 59, -63, 122, -13, 19, 39, 108, 79, -42, 75, 81, 11, -68, 92, 26, 36, -86, 45, 29, -17, -83, -22, -32, 77, 92, 82, 43, 19, 72, -5, -4, -83, 14, 26, 102, -38, 32, 78, -16, 
  56, 39, 49, -8, 7, -88, -50, -57, 99, -60, 58, -33, 47, -67, -30, -72, -53, -61, 25, 28, -97, 45, 45, -67, 64, -70, -89, -89, -44, 60, -111, 13, -52, 95, 27, 9, 7, 70, -7, 28, -70, 21, 75, -80, -51, -108, 89, 55, 79, -26, -82, -40, -93, 6, 14, 87, 87, -27, 1, 30, 82, 90, 68, -50, 71, 42, -97, 109, 103, 98, -44, -57, -94, -97, 34, -53, 54, -50, 44, -47, 69, -39, -18, 15, 
  -82, 10, 66, -21, -95, 76, 89, -90, -33, 88, 77, -37, -37, 94, 36, 26, 27, 23, -108, 33, 59, -93, 18, -79, -83, -68, -26, -62, -61, -26, -74, -107, 46, 3, 84, -10, 76, -65, 101, -68, 66, 71, -1, -68, 53, -94, 64, -55, 87, 54, 39, 6, -41, 89, 41, 87, 84, 38, 39, 73, -108, -15, -83, -10, -16, 86, -95, 66, 8, 41, -59, 9, -101, -39, -75, -25, 14, 114, -82, -71, 57, 19, 68, 89, 
  105, 101, -25, 40, -74, -76, -61, -50, -90, 11, -25, -78, -95, -97, 97, 1, 52, -36, 53, -57, -35, -28, 94, 95, 16, -80, -88, 77, 84, -4, 116, -2, -37, 21, 65, -90, -2, 77, -5, -87, 109, 52, -45, -47, -16, 60, -2, -97, -48, 80, 36, 82, 61, 28, 21, -18, -40, -50, -85, -55, 9, 46, -64, -98, 81, -51, -2, 55, 62, -30, 89, -60, 38, -71, 55, 66, -71, 105, 37, -93, 27, 32, 44, 37, 
  -17, 16, -90, 39, 87, 25, 48, 109, -14, -14, 48, -19, -18, 95, -28, 31, 49, 60, -43, 18, -66, -53, 59, 96, 85, -7, 78, 65, -84, 9, 44, -6, 57, -10, -93, 9, 59, 22, 33, 16, -6, 5, 35, -16, -19, 20, -78, -67, 113, -54, -14, -74, -53, -20, 34, -10, -11, -40, -88, -37, 72, -39, 36, -70, 77, -49, 48, -92, 39, -32, -3, -52, -33, 25, 30, 66, -81, 76, 75, -80, -8, 19, 45, 54, 
  -32, -68, -85, 78, -37, 70, 87, 5, 48, -65, -25, -37, -55, -74, 80, 77, 5, -37, -65, 62, 92, -7, -93, 31, -18, 36, 33, -25, 15, 91, -99, -72, -6, 19, 104, -81, -78, -13, -71, 59, -54, -74, -70, 23, 9, -104, -5, 3, 85, -87, 71, -66, 13, 71, 106, 63, 80, 96, -26, -59, 2, 30, 123, 66, 74, 114, -79, -15, 104, -83, 76, -38, -68, 73, -97, 66, 12, 64, 86, -53, 35, -8, -89, -88, 
  31, 77, 116, 58, 31, 49, -76, 30, -86, -45, -112, 80, 41, -29, 32, 29, 105, 78, -53, 63, 36, -96, -49, -40, 4, 76, 65, -67, -80, -58, -59, 38, -44, -33, 18, 66, -4, 13, -74, 81, 29, -64, 50, 27, 74, 72, 53, 71, -3, 35, 5, 27, -84, 91, -102, 12, 93, -25, 85, -35, -34, 86, 93, -63, -33, 62, 10, 38, 97, -82, -77, 83, 66, 79, 35, 5, -20, -54, 23, -60, -50, -39, 29, 97, 
  94, -65, -62, -49, 100, -46, -40, -9, 87, -17, -62, -95, 104, -74, -69, 22, -104, -38, 63, -20, -21, -27, -67, 90, 6, 95, 93, -102, 10, 36, 49, -50, 54, -73, -83, 69, -47, 67, -3, -77, -96, -30, -37, -70, -46, -4, 63, -56, -54, -13, -81, -47, -36, -19, 54, -95, -34, 10, 69, -88, -33, -69, -58, 91, 37, -24, -53, 93, 63, 58, 54, -34, -101, 32, 30, 80, -85, -63, -26, 2, 93, -94, 59, -56, 
  -10, -12, 21, -33, 2, 37, 76, -40, -105, -58, -4, -56, 39, -60, 13, 33, 50, -21, -56, -10, 36, -38, -48, 51, -5, -89, 39, 80, -99, -82, 70, 76, -65, 72, 72, 91, -4, 71, 64, -11, 87, -61, -76, 27, 22, 65, -58, 18, -63, 3, -44, -56, -23, -42, -62, 78, -65, -67, 8, 97, 61, -103, 34, -35, -59, -91, -37, 50, -40, -6, 91, 92, 95, -72, 30, 94, -96, 32, -79, 67, 73, 58, -11, 11, 
  15, -32, -1, -20, -80, 44, 22, 116, -79, 52, -44, 68, 43, -16, -41, -73, 10, 18, -68, -23, -7, 80, -107, 43, -78, -76, 34, -83, -72, 73, 79, 61, 40, 14, 52, -39, 27, 79, -65, -109, -38, -20, 88, -43, 70, -89, 49, -103, 34, -2, 10, -44, -32, 34, -16, 64, 99, -80, 57, 98, -39, 70, -66, 87, -85, -91, -79, 56, 29, 91, -15, 54, 90, 17, -43, -90, 87, -36, 53, -33, -71, -67, 36, 10, 
  -28, 71, -49, -40, -41, 45, -31, -68, 62, 1, -80, -94, -11, -91, 93, 61, -106, 93, -77, -59, -49, 9, -92, 66, 26, -77, 60, -48, 71, 22, 6, -53, -84, -3, 98, 60, -2, -58, 51, 5, 104, -92, -113, 87, -103, 49, 23, -35, -61, -101, 45, -23, 43, 13, -17, 7, -112, 65, -19, 67, 53, 57, -28, -14, -74, -20, 70, -99, -97, 15, 75, -65, 93, -58, 44, 105, 68, 91, -78, -56, -7, 14, -40, -43, 
  -69, 5, 31, 4, -86, -49, -66, 98, -47, 30, -102, 73, 51, -19, 101, -50, -56, -38, -19, -50, 3, -71, -65, -17, -39, -47, -44, 64, 83, -60, 54, -48, 39, -57, 10, 43, -86, -33, -86, 36, -101, 42, 21, 46, -52, 47, -78, 88, 87, -17, 112, -94, -88, -30, -62, 26, 91, -35, 98, -82, 3, -77, -63, 50, 31, -93, -99, 13, 76, 76, 70, -84, 65, -30, -78, -94, -9, 38, -55, -97, 64, -33, -61, 84, 
  10, 9, -19, -65, -92, -20, -36, 76, -33, 103, -3, 3, -90, -26, 49, 2, -50, 5, -112, 113, 42, -106, -62, -76, -72, 97, 9, -50, -86, 19, 52, -116, 68, -46, 55, 35, -82, 2, -77, -65, -17, -35, 77, 56, 118, -72, -13, 97, 127, 101, 87, -26, -46, -3, 114, 34, 53, 5, 90, -117, -122, -61, -78, -103, -83, 58, -76, 9, -29, -33, 70, 89, 38, 56, 10, 1, -15, 72, 63, -83, 47, -12, -19, 92, 
  -18, -102, 27, -2, 43, -83, 20, 36, -27, 77, -54, 69, 31, -19, -67, -83, -10, -28, -32, 57, -97, -10, 90, 23, -38, 70, -6, 45, -90, -47, 63, 48, 2, -72, -108, -37, -22, -57, 95, -95, -111, 45, -41, 73, 25, 54, -43, -39, 0, -77, 68, 44, -63, -101, 9, 82, -6, 22, -29, 41, 61, 89, 75, -11, 78, 34, -75, -7, -27, -100, 54, 30, 31, -79, -43, 97, -74, -118, -62, -105, 56, -48, 79, 27, 
  -7, -43, 21, 67, 31, 107, 91, 79, -25, 15, -4, 116, 106, -51, -82, 23, -60, -22, 74, -88, -6, 23, -97, 17, 77, -23, 81, -16, -58, -66, -36, 38, -109, -48, -20, 8, 47, -72, -41, -11, 86, 85, 76, -2, -92, 29, 30, 65, -93, -18, 8, 107, -25, -17, -52, -42, 16, 36, 56, -77, -44, 16, 70, 9, -84, 59, -69, 74, -64, -64, 55, -21, 24, 68, -14, 101, 48, -87, -44, -90, -30, -64, 45, 1, 
  -17, -45, 51, -74, 27, 46, 21, 88, -89, 53, 87, 75, 57, 83, -91, -95, 49, -41, -48, -23, -34, 17, 11, -32, -47, 56, 36, -3, -105, 45, -110, -87, -53, 65, -30, 12, 99, 15, 28, 64, -93, 19, 89, 41, 46, -38, 56, 88, 73, -48, 40, -69, -74, -18, -33, 65, 87, -36, -95, -24, -46, 22, 51, -50, 74, -50, -57, -56, -12, 30, 59, -57, -89, -6, 54, -61, 17, 45, 14, -70, -16, 76, 34, 6, 
  71, 17, 13, 1, 97, 13, -93, -76, 56, -49, -93, -32, 54, -110, 118, 99, 79, -66, 5, 95, -15, -38, -107, 41, 15, -91, 39, 20, -37, 4, -2, 63, 81, -51, -23, -6, 42, 42, -80, -13, -17, -62, 30, -12, 33, 41, -83, 51, 70, -15, 7, 26, -113, -14, -95, -42, 86, -78, -21, 71, -52, -91, 22, 80, 57, 8, -52, -91, -53, 20, 53, 3, 93, 27, -8, 92, -93, 47, -59, 47, -42, 41, 9, -28, 
  10, 9, 76, 58, 27, 91, 51, 52, 86, 66, 67, 73, -71, 56, -43, 73, 21, 76, 85, -110, 68, -22, 76, 82, -91, 86, -39, -28, 17, -51, -43, 7, -89, -60, 12, -92, 9, 48, 10, 73, -92, 78, -109, -51, -15, 60, -30, 68, -37, -63, 87, 87, -21, -10, 49, -95, 5, -63, 69, 68, 57, 59, 72, -30, 52, -20, 13, 63, -103, -64, -51, 24, -3, 6, -43, 85, -49, 99, -8, 61, 91, -56, -29, -12, 
  66, -119, -11, 28, -44, 60, -89, 40, -83, 53, 36, -12, -19, 53, 59, 13, 25, -78, -75, -71, -7, 94, 41, -68, -93, -38, -35, 15, -58, 65, -37, 79, 36, 101, 34, 67, 3, 72, -7, 61, 19, -24, 89, 89, -22, 15, 51, -1, 62, -30, -5, -22, 42, 95, 51, 22, -13, -28, 71, -12, 17, 90, -27, -57, -112, 64, 105, 72, 88, -72, -92, -103, 20, -62, 3, 3, 107, -87, 90, 35, 47, -24, -80, -62, 
  -27, -14, -41, 45, -6, 44, -46, 43, 16, -51, 95, -79, -88, -63, -90, -44, 26, 83, 103, -12, 77, -77, 10, 59, 3, -2, -83, -9, 95, 83, 41, -61, 66, -35, 63, 101, 64, 15, -54, 89, -66, -24, -11, -18, 56, -95, 57, -61, 18, -16, -15, 88, -103, 17, -79, 88, 63, -42, 72, -2, 91, 40, 17, -74, 31, 76, -49, -29, 80, 81, -96, -105, -36, 48, 52, -97, -68, 84, 70, -40, -65, -47, 116, -78, 
  -101, 72, 27, 37, 103, 72, -34, 87, -57, 102, -30, -7, 93, 45, -17, 71, 27, -30, 25, -85, -29, 55, -100, -25, -38, 95, 17, 33, 18, 94, -39, 80, -102, 13, 47, 6, -100, -52, -35, 93, 80, -46, -45, 30, -83, 5, 82, -54, 27, 91, -67, 95, -11, 79, -29, 19, 61, 76, -1, 88, -40, -78, -43, 52, -90, -6, -106, 85, -34, 88, -52, -34, 85, -48, 47, 16, -30, 92, 85, 42, -13, -69, -19, 46, 
  100, -88, 2, -3, 66, -74, 39, -52, 68, 79, 79, -95, -98, -100, -89, -78, -53, 55, -26, -89, -102, -51, 18, -29, -20, 81, 84, 2, -31, -26, -53, -16, -44, -17, -17, -20, -89, -47, 83, 84, -66, 21, -25, 11, 73, -48, 43, -103, 76, 8, 16, 1, 81, -11, -81, -42, -5, -27, 60, -8, 71, 35, -115, 108, 4, -95, -96, -21, -28, 64, 82, 79, -30, 101, -66, -22, 40, -27, -10, 57, 35, 37, 0, -29, 
  62, -40, -83, 62, -83, 17, -5, -35, 83, -71, 16, 47, -40, -94, 86, 17, 55, 60, 63, -9, 98, 36, 51, -72, -69, 35, -76, -78, 85, 0, 110, -100, 82, -74, -60, 41, 38, -12, 6, 114, -87, -90, -88, 4, -44, -62, 84, -37, -103, -47, 93, -57, -71, 55, 83, -61, -55, 44, 111, -25, -108, -31, -72, -25, -79, -24, -35, 93, 98, -19, 24, -55, 9, -20, 91, -29, -53, 37, -62, 91, 17, 62, 70, 13, 
  52, 63, 94, -76, 40, -31, -11, -45, 41, -103, -54, -101, -82, -110, -1, -42, 12, -84, 12, -77, -70, -91, -66, 57, 33, -20, -92, -12, 39, 14, 64, 92, -63, -28, -47, -100, 106, -20, -65, -49, 61, -32, 31, -23, 30, -45, -25, 28, -95, -87, -75, -22, -47, 76, -29, 9, -48, -7, 22, -45, 63, 24, -53, -3, -98, -44, 20, 76, -43, -14, 65, -47, -65, 14, -84, -5, -109, 68, -33, -15, 72, 22, 20, 70, 
  48, -6, 127, 96, 104, 58, -49, -53, -23, 50, 71, -78, -33, 60, -58, -33, 88, 58, 31, -5, 73, -6, 54, -79, 62, -22, 59, -31, 16, 41, 71, 101, 108, 33, -78, -32, -78, -5, 42, -102, -11, -50, 25, -3, 37, -30, -87, -79, 92, 46, -56, 97, 71, 98, -77, 54, 26, 27, 25, -56, -52, -47, 44, -36, -23, -92, -35, -33, -10, -22, 111, -44, 107, -21, 13, 89, -34, -12, 54, 87, -76, -61, -71, 67, 
  -81, 57, -50, -11, -106, -52, 19, 44, 59, 15, -6, -78, 30, -15, 102, -61, 34, 34, 79, -16, -97, 49, -87, -34, -86, -34, 79, -20, -31, -14, -39, -79, 27, 29, -80, 15, 93, 119, 44, 46, 58, 21, 12, -3, -18, -62, -66, 62, -4, 98, -92, -10, 36, 47, 70, 37, 40, -71, -88, 3, -90, 52, -59, -94, -14, 8, -9, -3, -37, -20, -25, -77, -11, -63, -83, -51, 104, -22, -30, -1, 34, -87, 41, 99, 
  -104, -11, -90, -84, 32, 40, -108, 60, -84, 58, -76, 63, -96, 61, 47, 69, 50, 101, -4, 44, 43, 25, 13, -17, -42, -74, 86, -100, -20, 19, -60, 101, 48, -18, 72, -37, 22, 83, -49, -27, 84, -55, 2, 26, -95, 11, 58, -7, -43, -81, -76, 28, -87, -25, 52, 66, -15, 16, 43, -74, -75, -68, -61, -93, 62, -57, 62, 13, -37, 58, 24, -105, -77, 2, -92, -61, -107, 0, -86, -49, 0, 1, 40, -2, 
  -98, -95, -59, 72, -91, -83, -104, -31, 89, -45, -27, -95, -50, -38, -93, 46, 71, 72, -24, 55, 32, -14, 86, 47, 33, -7, 73, -36, -73, 23, -64, -34, 14, 31, 68, -24, 25, 21, 71, -89, 83, 72, 55, 19, -16, 52, 116, -27, -28, -84, -11, 28, -76, -38, 78, 57, 29, 56, 25, -80, -66, 40, -42, -87, 69, -110, 29, -42, 53, 43, 84, 19, -84, 38, 28, -79, -6, -46, -88, -76, -117, -87, -88, -3, 
  69, -55, -32, 26, 50, 13, 7, 15, 101, 72, -40, 99, -44, 24, -19, 70, -70, 30, -71, 45, -13, 47, 80, 10, -56, -26, 4, 49, 66, -122, -63, 12, -48, -23, -2, -21, 106, -7, -88, 52, 86, 37, -3, 38, -106, 91, -14, -85, 4, 0, -62, -102, -29, 12, -60, 93, 12, -2, 80, -39, -24, 64, -64, 0, 92, 57, -89, -1, -59, -90, -31, 31, -63, -3, 4, -107, 50, 35, -86, -1, 92, -100, 46, 63, 
  -78, -77, -48, 16, -22, 32, -92, 84, -55, -50, -26, 18, -13, -93, 19, 92, -28, -44, 88, -32, -22, 18, -20, -45, 82, 41, 18, -66, -33, 16, -62, -36, 103, -68, -3, -57, 112, -42, 1, -19, -4, 98, 38, -17, 14, 36, -22, -43, -24, -44, 0, -96, 74, 60, 87, 89, -36, -90, 84, 75, -8, -52, 38, -50, 29, 54, 76, 10, -19, 39, 35, -35, -59, -35, -61, -101, -106, -100, 30, -12, 49, -21, -79, 81, 
  66, 107, -22, 76, 96, -58, -66, 97, -49, -16, -47, -8, -91, -43, 114, -19, -14, 28, 5, 58, -54, -16, 90, -98, -80, 58, -14, 106, -23, 26, -56, 47, -97, 29, -34, -41, 105, -81, 48, 99, 53, -13, -67, -24, -32, 86, 70, 50, 101, 53, 67, -15, 45, -67, 104, -16, -80, 57, 49, 14, 83, 67, -18, -34, -93, -14, -87, -19, -37, -92, 36, 1, 106, -85, 87, 2, 89, -57, 23, 44, -41, -11, 38, -17, 
  -39, -103, -81, -26, -47, 25, 15, 26, 90, 74, 8, -80, -46, -72, 16, 0, 8, -97, 113, 31, -79, 67, -58, -28, -42, 17, 75, -44, 45, -41, 83, 88, 47, 82, 90, 43, 79, 80, 64, -56, 109, 32, -66, -15, 4, 71, 52, -33, -52, 44, -30, 88, -34, -63, 19, 100, -43, -94, 15, -67, 36, -46, 54, 0, -52, -21, -31, 27, -95, 87, -77, 33, -49, -6, -86, 50, 20, -57, -37, 89, -70, 38, -68, 54, 
  81, -50, 42, -110, 72, -56, 3, -76, -96, 113, -55, 56, 7, 83, -91, 18, -72, -46, -91, -74, 59, -54, 68, 38, 75, 8, -15, 47, 73, -6, -74, 66, -15, -72, 96, 24, 1, 17, -60, -41, 79, 21, -97, 46, 81, 75, -6, 55, 24, -46, -104, 54, 16, -75, 34, -91, -62, 18, -66, -17, 40, 102, -73, -31, -104, 12, 79, -55, 67, -110, -78, -13, -67, 33, -75, -3, -10, 37, -75, -6, -87, 52, -66, -4, 
  -26, -89, -73, 42, -90, 44, 72, 10, 71, 79, -60, 64, 70, 102, 72, 21, -85, -24, 100, 32, 30, 82, 78, -26, 6, 16, 22, 21, -66, -12, 38, 104, -20, -44, -17, -46, -62, -19, 48, 45, 13, 41, 1, 3, -2, -90, 44, -69, 13, 92, -5, -103, 86, 21, 79, 62, -72, -24, 43, -38, -28, -58, 22, 1, -42, -12, -80, 6, -29, 72, 49, 89, -98, -14, -95, 4, 10, 15, 77, -26, 82, -36, -57, -23, 
  86, -83, 27, -20, 14, -42, 47, 4, 84, 25, 63, 33, 82, 12, -7, 59, 106, -58, -87, 2, -2, 90, 83, -92, -53, 65, -88, -29, 63, 76, -66, 16, -53, -94, -73, 68, 105, 20, -92, -27, 3, 52, -64, -87, 104, -93, 4, 50, -24, -18, 45, 71, 53, -96, -19, 55, -9, 65, 47, -50, -42, -24, 96, -28, 63, -93, 4, 16, 57, 96, -32, 85, 36, -73, -33, 86, 74, -55, -83, -56, -96, -80, 102, -7, 
  -102, 52, 76, 44, -70, -38, 67, -31, 58, 60, 64, -20, 60, 74, -20, -76, -108, -108, -72, 97, -7, -69, 26, 57, -4, 29, -69, 69, -6, 22, 50, -77, 50, 81, -13, 53, 18, -84, 53, -36, -46, 16, 59, 7, -4, -79, 115, 41, 105, 20, 49, 98, 35, 42, 62, 110, 80, -53, -3, -102, -26, -12, -40, -36, 9, -80, -3, -61, -14, 43, -63, -114, -13, 78, 0, -90, -32, -29, -80, -45, 30, 13, 0, -15, 
  -60, 86, 93, 22, 50, -15, -51, -40, -60, -43, 66, 9, 79, -16, -105, -39, -7, 90, -53, 52, -21, 97, -106, -18, 101, 68, -99, 94, -61, 43, 97, -55, 78, 50, -45, -105, -91, -104, -25, -58, 94, -46, -32, 40, -8, -60, 15, -102, -2, 86, -57, 81, -31, -92, 18, 78, 21, -32, -73, 98, 84, -14, 99, -48, 90, 8, -67, -36, 2, -25, 40, -1, 83, 29, 76, 54, 4, -32, -80, -104, -58, 81, 67, 59, 
  24, 6, -26, 39, -66, -109, 69, -82, -36, -102, 59, -33, 104, -11, -88, -88, -83, -17, 47, -31, -85, -77, 83, -64, 85, 9, 112, 55, 79, 83, -34, -1, 40, 32, -64, 26, 22, -78, -19, 115, 19, -105, -19, -57, -57, -103, -85, 98, -54, -62, -88, -67, 36, 72, 52, 88, 73, 72, 18, 70, -40, 54, -50, -85, -96, -80, -45, -48, -83, -86, 62, 64, 38, 29, -86, 50, 42, -33, -11, 71, 2, -104, -13, 46, 
  14, -107, 94, 46, -101, 37, 31, 48, -28, 17, -24, -64, 98, 2, -64, 83, -81, 85, -53, 59, 18, 59, -9, 73, 61, 3, 59, 61, 67, 28, -30, 43, -59, 109, -10, 109, -79, 97, 29, 45, 76, 47, -73, -65, 25, 70, -67, -27, -92, 35, -65, -89, -76, -81, -104, 21, -3, 81, 91, -79, 42, 57, 78, -78, 62, 7, -59, 8, -95, 54, -34, -32, -108, -24, -44, -106, 47, 79, 6, 36, 61, 74, -43, -91, 
  -49, 73, 62, -89, 8, -41, -58, -29, -52, 39, -89, 71, -1, -35, 31, -8, -19, -6, -49, -49, -95, -11, 81, -74, 74, -75, 61, 93, -42, 65, 69, 26, 13, -14, 19, -25, -46, 11, -66, -54, 4, 92, -82, -72, 57, -88, -33, -97, -93, 98, 48, 85, -14, -78, 47, -99, -53, -65, -103, 20, -1, -11, -49, -21, -27, 69, 53, 14, 58, 40, -54, 79, 78, 102, -79, 40, 62, 101, 90, 21, -34, 82, 4, -44, 
  44, 81, 47, -17, -34, -72, -56, -51, -46, -57, 21, -61, 12, 5, 43, -71, 122, 25, -104, 58, -21, 13, 64, -53, 46, -25, -24, -32, -6, 50, 60, -86, 55, 64, 50, 50, 22, 80, -92, -90, -8, -61, -75, -90, 33, -67, -34, 1, -5, 0, -77, 86, -31, 3, -5, -28, 73, 60, -70, -10, 7, 30, 17, -61, 26, 89, 35, 23, -18, 93, -88, 89, -22, -89, 66, -74, 57, 81, 64, -58, -69, 24, -58, -44, 
  56, 51, -60, -25, 70, -89, -57, 34, 88, -55, -19, -82, -11, 101, 82, -44, -103, 14, 0, -108, 91, 79, 48, 62, 77, 39, 59, 78, 11, -99, -47, 44, -77, 44, 29, -82, -96, -82, 18, -71, -56, -68, 6, 50, 11, -47, -52, -105, -6, 35, 90, -4, -114, -27, 67, 21, 65, 87, -70, -17, -47, -9, -104, -20, 22, -40, 24, 54, 5, -22, -37, 58, -80, 90, -30, 2, -8, 24, -44, -87, -42, -27, -97, -74, 
  -96, -27, -10, 65, -108, 4, 66, 34, 26, -2, 37, 88, -82, 9, 69, -22, -66, -5, 39, 8, -94, 47, 17, 92, -65, -73, -37, -58, 81, -34, -40, -48, -91, -17, -52, -3, -33, 34, -91, -59, -86, -11, -56, 52, -54, 44, 57, -6, -48, 31, -39, 4, -32, 16, -5, -38, 30, -11, -21, 35, -55, 10, 55, 48, 50, 33, -47, -63, 63, 8, -86, -43, 45, -42, 74, 86, -42, 8, -42, -78, -61, 57, -81, 34, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 50,84 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0020235732663422823, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,50 } };
const TfArray<1, float> quant7_scale = { 1, { 0.14650756120681763, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,20 } };
const TfArray<1, float> quant8_scale = { 1, { 0.048984523862600327, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,5 } };
const TfArray<1, float> quant9_scale = { 1, { 0.069919005036354065, } };
const TfArray<1, int> quant9_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,5 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 84, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 1000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 4200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 96), (TfLiteIntArray*)&g0::tensor_dimension7, 50, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 32), (TfLiteIntArray*)&g0::tensor_dimension9, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
